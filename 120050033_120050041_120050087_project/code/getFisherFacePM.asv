function W = getFisherFacePM(X, n, c, t)
    %% Get Fisher Face Projection Matrix
    % Returns the fisher face based face recognition weight matrix
    
    % X - training dataset
    % n - number of images
    % c - the number of users (classes in recognition)
    % t - training set size per user

    image_size = size(X, 1);
    
    %% Training Phase
    display('[Progress] Loading the Fisher Face Projection Matrix');
    
    mat_file = '../dataset/CachedYale/yale_fisherface_pm.mat';
    if exist(mat_file, 'file')
        display('[Progress] Loading the Fisher Face from the .mat file');
        load(mat_file, 'W');
        return
    end
    
    pca_mat_file = '../dataset/CachedYale/yale_fisher_pca.mat';
    
    %% Computation
    Wpca = getCachedPca(X, 1, n - c, pca_mat_file);  
    
    % Between-class scatter matrix
    Sb = zeros(image_size, 1);
    for class = 1:c
        start_pos = class -
    end
    
    % Within-class scatter matrix
    Sc = zeros(image_size, 1);
    
    % Get the projected between and within matrices
    Sb = Wpca'*Sb*Wpca;
    Sc = Wpca'*Sc*Wpca;
        
    % Get the generalised eigen vector
    [Evec, ~] = eigs(Sb, Sc);
    
    % Only the first c-1 eigen vectors corresponding
    % to the non-zero eigen value
    Wfld = Evec(:, 1:c-1);
    
    % Calculate Wopt' = Wfld' * Wpca'
    W = Wpca * Wfld;
    
    save(mat_file, 'W');
    display('[Progress] Loaded the Fisher Face Projection Matrix');
end